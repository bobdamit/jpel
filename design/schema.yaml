# JPEL Schema v2 - Simplified JSON-based Process Execution Language
# Inspired by BPEL4People but designed for simplicity and readability

process:
  type: object
  required:
    - id
    - name
    - start
    - activities
  properties:
    id:
      type: string
      description: Unique process identifier
      example: mic-build
    name:
      type: string
      description: Human-readable process name
      example: Build a Microphone
    description:
      type: string
      description: Process description
      example: Quality control process for microphone assembly
    version:
      type: string
      description: Process version
      example: "1.0.0"
    variables:
      type: array
      description: Process-level variables
      items:
        $ref: "#/components/schemas/Variable"
    start:
      type: string
      description: Initial activity reference
      example: "a:askBuildType"
    activities:
      type: object
      description: Map of activity definitions
      additionalProperties:
        $ref: "#/components/schemas/Activity"

components:
  schemas:
    Variable:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          description: Variable name
          example: buildType
        type:
          type: string
          enum: [text, number, boolean, select, date, file]
          description: Variable type
        defaultValue:
          description: Default value
          example: "TC"
        description:
          type: string
          description: Variable description
          example: "Type of microphone build"

    Activity:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          description: Unique activity identifier
          example: askBuildType
        name:
          type: string
          description: Human-readable activity name
          example: "Ask Build Type"
        description:
          type: string
          description: Activity description
        type:
          type: string
          enum: [human, compute, api, sequence, parallel, branch, switch, terminate]
          description: Activity type
        timeout:
          type: integer
          description: Activity timeout in seconds
          example: 300

    # Human interaction activity
    HumanActivity:
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            type:
              const: human
            prompt:
              type: string
              description: Prompt shown to user
              example: "What type of microphone are you building?"
            inputs:
              type: array
              description: Input fields for user
              items:
                $ref: "#/components/schemas/Field"
            fileUploads:
              type: array
              description: File upload specifications
              items:
                $ref: "#/components/schemas/FileUpload"
            attachments:
              type: array
              description: Reference attachments
              items:
                $ref: "#/components/schemas/Attachment"

    Field:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          description: Field identifier
          example: buildType
        type:
          type: string
          enum: [text, number, boolean, select, date, file]
          description: Input field type
        required:
          type: boolean
          description: Whether field is required
          default: false
        options:
          type: array
          description: Options for select fields
          items:
            type: string
          example: ["TC", "TL"]
        min:
          type: number
          description: Minimum value (for numbers)
        max:
          type: number
          description: Maximum value (for numbers)
        units:
          type: string
          description: Units of measurement
          example: "VDC"
        defaultValue:
          description: Default field value
        description:
          type: string
          description: Field description
        pattern:
          type: string
          description: Regular expression pattern for validation
          example: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        patternDescription:
          type: string
          description: Human-readable description of the pattern requirements
          example: "Please enter a valid email address (e.g., user@example.com)"

# Runtime conversion notes
# When a process instance is created from a Process Template, HumanActivity.inputs
# (which are arrays of `Field` objects) MUST be converted into `FieldValue` objects
# where each FieldValue extends the Field schema with an additional `value` field.
#
# Conversion rules:
# - Field.defaultValue -> FieldValue.value when creating a new instance (if present)
# - If no defaultValue is present, FieldValue.value may be undefined
# - When a human task is submitted, engine updates both activityInstance.data and
#   activityInstance.inputs[*].value to ensure expressions and UI binding both work.
# - API endpoints must return FieldValue[] for current human tasks so clients can
#   bind to `field.value` for pre-population during re-run or resume.


    FileUpload:
      type: object
      required:
        - name
        - allowedTypes
        - maxBytes
      properties:
        name:
          type: string
          description: Upload identifier
        description:
          type: string
          description: Upload description
        allowedTypes:
          type: array
          items:
            type: string
          description: Allowed MIME types
          example: ["image/jpeg", "image/png"]
        maxBytes:
          type: integer
          description: Maximum file size in bytes
        minCount:
          type: integer
          description: Minimum number of files
          default: 1
        maxCount:
          type: integer
          description: Maximum number of files
          default: 1

    Attachment:
      type: object
      required:
        - name
        - url
        - mediaType
      properties:
        name:
          type: string
          description: Attachment name
        url:
          type: string
          description: Attachment URL
        mediaType:
          type: string
          description: MIME type
        bytes:
          type: integer
          description: File size in bytes

    # API call activity
    APIActivity:
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            type:
              const: api
            method:
              type: string
              enum: [GET, POST, PUT, DELETE]
              description: HTTP method
            url:
              type: string
              description: API endpoint URL
              example: "https://api.example.com/validate"
            headers:
              type: object
              description: HTTP headers
              additionalProperties:
                type: string
            queryParams:
              type: object
              description: Query parameters
              additionalProperties:
                type: string
            body:
              description: Request body
              type: object

    # JavaScript execution activity
    ComputeActivity:
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            type:
              const: compute
            code:
              type: array
              description: JavaScript code lines
              items:
                type: string
              example:
                - "const buildType = a:askBuildType.f:buildType;"
                - "this.result = buildType === 'TC' ? 'pass' : 'fail';"

    # Sequential execution activity
    SequenceActivity:
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            type:
              const: sequence
            activities:
              type: array
              description: Activities to execute in order
              items:
                type: string
              example: ["a:step1", "a:step2", "a:step3"]

    # Parallel execution activity
    ParallelActivity:
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            type:
              const: parallel
            activities:
              type: array
              description: Activities to execute in parallel
              items:
                type: string
              example: ["a:task1", "a:task2", "a:task3"]

    # Conditional branching activity
    BranchActivity:
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          required:
            - condition
            - then
          properties:
            type:
              const: branch
            condition:
              type: string
              description: JavaScript condition expression
              example: "a:askBuildType.f:buildType === 'TC'"
            then:
              type: string
              description: Activity to execute if condition is true
              example: "a:tcSequence"
            else:
              type: string
              description: Activity to execute if condition is false
              example: "a:tlSequence"

    # Multi-case conditional branching activity
    SwitchActivity:
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          required:
            - expression
            - cases
          properties:
            type:
              const: switch
            expression:
              type: string
              description: JavaScript expression to evaluate
              example: "a:reviewDocument.f:approverDecision"
            cases:
              type: object
              description: Map of case values to activity references
              additionalProperties:
                type: string
              example:
                approved: "a:documentApproved"
                rejected: "a:documentRejected"
                needs-revision: "a:documentNeedsRevision"
            default:
              type: string
              description: Default activity if no case matches
              example: "a:documentRejected"

    # Process termination activity
    TerminateActivity:
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            type:
              const: terminate
            reason:
              type: string
              description: Termination reason
              example: "Process completed successfully"
            result:
              type: string
              enum: [success, failure]
              description: Termination result
              default: success

# Runtime schemas (for process instances)
processInstance:
  type: object
  required:
    - instanceId
    - processId
    - status
  properties:
    instanceId:
      type: string
      description: Unique instance identifier
    processId:
      type: string
      description: Reference to process definition
    status:
      type: string
      enum: [running, completed, failed, cancelled]
      description: Instance execution status
    startedAt:
      type: string
      format: date-time
      description: Instance start time
    completedAt:
      type: string
      format: date-time
      description: Instance completion time
    currentActivity:
      type: string
      description: Currently executing activity
    variables:
      type: object
      description: Process variable values
      additionalProperties: true

# Conversion rules and runtime notes
# ==================================================
# When a Process Template (definition) is instantiated into a Process Run Instance,
# the following conversion rules are applied to ensure runtime state is captured
# and the UI can bind to runtime values.
#
# - Field -> FieldValue conversion:
#   * For each HumanActivity.inputs (an array of `Field` objects) in the process template,
#     the engine creates a corresponding `inputs` array on the ActivityInstance where each
#     item is a `FieldValue` (i.e., a Field with an added `value` property).
#   * The initial `value` is set to the Field's `defaultValue` if present, otherwise left
#     undefined.
#
# - Storing runtime data:
#   * When a human task is submitted, the submitted key/value pairs are stored in two places:
#     1) activityInstance.data (a plain map used by expressions and legacy code), and
#     2) activityInstance.inputs (an array of `FieldValue`) — each matching field's `.value` is
#        updated so UI clients can read a consistent runtime model.
#
# - Re-run behavior:
#   * When re-running an instance, previous activityInstance.data values are copied into the
#     new instance's `inputs` (FieldValue[].value) so that human tasks are pre-populated with
#     prior values.
#
# - API behavior:
#   * Endpoints that return human tasks (e.g., `/api/instances/:id/current-task`, `createInstance`)
#     must return `FieldValue[]` (not `Field[]`) in the `humanTask.fields` payload so UI code can
#     safely access `field.value`.

    activities:
      type: object
      description: Activity instance states
      additionalProperties:
        $ref: "#/components/schemas/ActivityInstance"

activityInstance:
  type: object
  required:
    - id
    - type
    - status
  properties:
    id:
      type: string
      description: Activity identifier
    type:
      type: string
      enum: [human, compute, api, sequence, parallel, branch, switch, terminate]
    status:
      type: string
      enum: [pending, running, completed, failed, cancelled, timeout]
    passFail:
      type: string
      enum: [pass, fail]
      description: Quality check result
    startedAt:
      type: string
      format: date-time
    completedAt:
      type: string
      format: date-time
    data:
      type: object
      description: Activity execution data
      additionalProperties: true
    error:
      type: string
      description: Error message if failed
# JPEL Schema v2 - Simplified JSON-based Process Execution Language
# Inspired by BPEL4People but designed for simplicity and readability
#
# JPEL Variable Access Syntax:
# - Activity variables: a:activityId.v:variableName
# - Process variables: v:variableName or var:variableName  
# - Variable assignment: v:variableName = expression
# - Examples:
#   * const name = a:getUserInfo.v:customerName;
#   * v:isValid = a:validateData.v:approved && a:checkRules.v:passed;
#   * var:totalScore = a:quiz.v:score + a:bonus.v:points;

process:
  type: object
  required:
    - id
    - name
    - start
    - activities
  properties:
    id:
      type: string
      description: Unique process identifier
      example: mic-build
    name:
      type: string
      description: Human-readable process name
      example: Build a Microphone
    description:
      type: string
      description: Process description
      example: Quality control process for microphone assembly
    version:
      type: string
      description: Process version
      example: "1.0.0"
    variables:
      type: array
      description: Process-level variables
      items:
        $ref: "#/components/schemas/Variable"
    start:
      type: string
      description: Initial activity reference
      example: "a:askBuildType"
    activities:
      type: object
      description: Map of activity definitions
      additionalProperties:
        $ref: "#/components/schemas/Activity"
  additionalProperties: false

components:
  schemas:
    Variable:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          description: Variable name
          example: buildType
        type:
          type: string
          enum: [text, number, boolean, select, date, file]
          description: Variable type
        defaultValue:
          description: Default value
          example: "TC"
        description:
          type: string
          description: Variable description
          example: "Type of microphone build"

        # Optional presentation metadata
        label:
          type: string
          description: Optional human-friendly label for UIs
          example: "Build Type"
        hint:
          type: string
          description: Optional hint/help text for UIs (e.g., tooltip)
          example: "Select the microphone category"
        # Runtime value and validation metadata
        value:
          description: Runtime value of the variable (type depends on `type`)
        required:
          type: boolean
          description: Whether the variable is required
          default: false
        options:
          type: array
          description: Options for select fields as label/value pairs
          items:
            $ref: "#/components/schemas/ValueOption"
        min:
          type: number
          description: Minimum value (for numbers)
        max:
          type: number
          description: Maximum value (for numbers)
        units:
          type: string
          description: Units of measurement
          example: "VDC"
        pattern:
          type: string
          description: Regular expression pattern for validation
          example: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        patternDescription:
          type: string
          description: Human-readable description of the pattern requirements
          example: "Please enter a valid email address (e.g., user@example.com)"
      additionalProperties: false

    Activity:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          description: Unique activity identifier
          example: askBuildType
        name:
          type: string
          description: Human-readable activity name
          example: "Ask Build Type"
        description:
          type: string
          description: Activity description
        type:
          type: string
          enum: [human, compute, api, sequence, parallel, branch, switch, terminate]
          description: Activity type
        timeout:
          type: integer
          description: Activity timeout in seconds
          example: 300
      # Note: individual activity subtype schemas (HumanActivity, ComputeActivity,
      # APIActivity, etc.) extend Activity via allOf and define their own properties.
      # Do not set additionalProperties: false here or it will reject valid subtype
      # fields like 'inputs', 'code', 'cases', etc.

    # Human interaction activity
    HumanActivity:
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            type:
              const: human
            prompt:
              type: string
              description: Prompt shown to user
              example: "What type of microphone are you building?"
            inputs:
              type: array
              description: Input fields for user
              items:
                $ref: "#/components/schemas/Field"
            fileUploads:
              type: array
              description: File upload specifications
              items:
                $ref: "#/components/schemas/FileUpload"
            attachments:
              type: array
              description: Reference attachments
              items:
                $ref: "#/components/schemas/Attachment"

    Field:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          description: Field identifier
          example: buildType
        label:
          type: string
          description: Optional human-friendly label shown in the UI
          example: "Build Type"
        hint:
          type: string
          description: Optional hint or tooltip text for the field
          example: "Choose the category that best matches the microphone"
        type:
          type: string
          enum: [text, number, boolean, select, date, file]
          description: Input field type
        required:
          type: boolean
          description: Whether field is required
          default: false
        options:
          type: array
          description: Options for select fields
          items:
            $ref: "#/components/schemas/ValueOption"
          example:
            - value: "TC"
              label: "Transformer Coupled"
            - value: "TL"
              label: "Transformerless"
        min:
          type: number
          description: Minimum value (for numbers)
        max:
          type: number
          description: Maximum value (for numbers)
        units:
          type: string
          description: Units of measurement
          example: "VDC"
        defaultValue:
          description: Default field value
        description:
          type: string
          description: Field description
        pattern:
          type: string
          description: Regular expression pattern for validation
          example: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        patternDescription:
          type: string
          description: Human-readable description of the pattern requirements
          example: "Please enter a valid email address (e.g., user@example.com)"
      additionalProperties: false

    ValueOption:
      type: object
      required:
        - value
      properties:
        label:
          type: string
          description: Optional human-friendly label for the option
          example: "Transformer Coupled"
        value:
          description: Option value (may be string, number or boolean)
          oneOf:
            - type: string
            - type: number
            - type: boolean

# Runtime conversion notes
# When a process instance is created from a Process Template, HumanActivity.inputs
# (which are arrays of `Field` objects) are converted into `Variable` objects
# stored in the ActivityInstance.variables array.
#
# Variable-based Architecture:
# - All activity types store runtime data in ActivityInstance.variables (Variable[] array)
# - Field definitions are converted to Variables with initial values set to defaultValue
# - Variables support both runtime values and metadata (type, validation, etc.)
# - No redundant data structures - only variables array exists at runtime
#
# JPEL Syntax:
# - Variable access: a:activityId.v:variableName (e.g., a:askBuildType.v:buildType)
# - Process variables: v:variableName (e.g., v:onboardingComplete)
# - Variable assignment: v:variableName = value
#
# API Behavior:
# - Endpoints return FieldValue[] (which extends Variable) for UI compatibility
# - FieldValue[] is generated on-demand from ActivityInstance.variables
# - No legacy getValue() function - only direct syntax supported


    FileUpload:
      type: object
      required:
        - name
        - allowedTypes
        - maxBytes
      properties:
        name:
          type: string
          description: Upload identifier
        description:
          type: string
          description: Upload description
        allowedTypes:
          type: array
          items:
            type: string
          description: Allowed MIME types
          example: ["image/jpeg", "image/png"]
        maxBytes:
          type: integer
          description: Maximum file size in bytes
        minCount:
          type: integer
          description: Minimum number of files
          default: 1
        maxCount:
          type: integer
          description: Maximum number of files
          default: 1

    Attachment:
      type: object
      required:
        - name
        - url
        - mediaType
      properties:
        name:
          type: string
          description: Attachment name
        url:
          type: string
          description: Attachment URL
        mediaType:
          type: string
          description: MIME type
        bytes:
          type: integer
          description: File size in bytes

    # API call activity
    APIActivity:
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            type:
              const: api
            method:
              type: string
              enum: [GET, POST, PUT, DELETE]
              description: HTTP method
            url:
              type: string
              description: API endpoint URL
              example: "https://api.example.com/validate"
            headers:
              type: object
              description: HTTP headers
              additionalProperties:
                type: string
            queryParams:
              type: object
              description: Query parameters
              additionalProperties:
                type: string
            body:
              description: Request body
              type: object

    # JavaScript execution activity
    ComputeActivity:
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            type:
              const: compute
            code:
              type: array
              description: JavaScript code lines using JPEL variable syntax
              items:
                type: string
              example:
                - "// Access activity variables using a:activity.v:variable syntax"
                - "const buildType = a:askBuildType.v:buildType;"
                - "const quality = a:checkQuality.v:qualityScore;"
                - "// Assign to process variables using v:variable syntax"
                - "v:buildResult = buildType === 'TC' ? 'pass' : 'fail';"
                - "// Complex expressions with multiple variables"
                - "v:isComplete = a:equipmentCheck.v:equipmentOK && a:testResults.v:allTestsPassed;"

    # Sequential execution activity
    SequenceActivity:
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            type:
              const: sequence
            activities:
              type: array
              description: Activities to execute in order
              items:
                type: string
              example: ["a:step1", "a:step2", "a:step3"]

    # Parallel execution activity
    ParallelActivity:
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            type:
              const: parallel
            activities:
              type: array
              description: Activities to execute in parallel
              items:
                type: string
              example: ["a:task1", "a:task2", "a:task3"]

    # Conditional branching activity
    BranchActivity:
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          required:
            - condition
            - then
          properties:
            type:
              const: branch
            condition:
              type: string
              description: JavaScript condition expression
              example: "a:askBuildType.v:buildType === 'TC'"
            then:
              type: string
              description: Activity to execute if condition is true
              example: "a:tcSequence"
            else:
              type: string
              description: Activity to execute if condition is false
              example: "a:tlSequence"

    # Multi-case conditional branching activity
    SwitchActivity:
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          required:
            - expression
            - cases
          properties:
            type:
              const: switch
            expression:
              type: string
              description: JavaScript expression to evaluate
              example: "a:reviewDocument.v:approverDecision"
            cases:
              type: object
              description: Map of case values to activity references
              additionalProperties:
                type: string
              example:
                approved: "a:documentApproved"
                rejected: "a:documentRejected"
                needs-revision: "a:documentNeedsRevision"
            default:
              type: string
              description: Default activity if no case matches
              example: "a:documentRejected"

    # Process termination activity
    TerminateActivity:
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            type:
              const: terminate
            reason:
              type: string
              description: Termination reason
              example: "Process completed successfully"
            result:
              type: string
              enum: [success, failure]
              description: Termination result
              default: success

# Runtime schemas (for process instances)
processInstance:
  type: object
  required:
    - instanceId
    - processId
    - status
  properties:
    instanceId:
      type: string
      description: Unique instance identifier
    processId:
      type: string
      description: Reference to process definition
    status:
      type: string
      enum: [running, completed, failed, cancelled]
      description: Instance execution status
    startedAt:
      type: string
      format: date-time
      description: Instance start time
    completedAt:
      type: string
      format: date-time
      description: Instance completion time
    currentActivity:
      type: string
      description: Currently executing activity
    variables:
      type: object
      description: Process variable values
      additionalProperties: true

# JPEL Variable-based Runtime Architecture
# =========================================
# JPEL uses a consistent Variable-based architecture across all activity types.
#
# Variable Storage:
# - All activities store runtime data in ActivityInstance.variables (Variable[] array)
# - Variables contain both value and metadata (type, validation rules, etc.)
# - No redundant data structures like formData, computedValues, or inputs arrays
#
# Variable Access Syntax:
# - Activity variables: a:activityId.v:variableName
# - Process variables: v:variableName or var:variableName
# - Assignment: v:variableName = expression
# - Direct access only - no getValue() function
#
# Runtime Behavior:
# - Human activity inputs (Field[]) are converted to variables (Variable[]) at instance creation
# - Redundant inputs array is removed from runtime instances
# - UI receives FieldValue[] (extends Variable) converted on-demand from variables
# - All expressions use direct variable access syntax
#
# Legacy Syntax Removed:
# - a:activity.f:field syntax is no longer supported
# - getValue() function has been eliminated
# - Only modern v: syntax is accepted

    activities:
      type: object
      description: Activity instance states
      additionalProperties:
        $ref: "#/components/schemas/ActivityInstance"

ActivityInstance:
  type: object
  required:
    - id
    - type
    - status
  properties:
    id:
      type: string
      description: Activity identifier
    type:
      type: string
      enum: [human, compute, api, sequence, parallel, branch, switch, terminate]
    status:
      type: string
      enum: [pending, running, completed, failed, cancelled, timeout]
    passFail:
      type: string
      enum: [pass, fail]
      description: Quality check result
    startedAt:
      type: string
      format: date-time
    completedAt:
      type: string
      format: date-time
    variables:
      type: array
      description: Activity variable storage (unified across all activity types)
      items:
        $ref: "#/components/schemas/Variable"
    error:
      type: string
      description: Error message if failed

# Variable schema (used in both process-level and activity-level storage)
Variable:
  type: object
  required:
    - name
    - type
  properties:
    name:
      type: string
      description: Variable name
    type:
      type: string
      enum: [text, number, boolean, select, date, file]
      description: Variable type
    value:
      description: Runtime variable value
    defaultValue:
      description: Default value
    description:
      type: string
      description: Variable description
    required:
      type: boolean
      description: Whether variable is required
    options:
      type: array
      description: Options for select fields
      items:
        type: string
    min:
      type: number
      description: Minimum value (for numbers)
    max:
      type: number
      description: Maximum value (for numbers)
    units:
      type: string
      description: Units of measurement
    pattern:
      type: string
      description: Regular expression pattern for validation
    patternDescription:
      type: string
      description: Human-readable description of pattern requirements